#!/usr/bin/env python3
"""
Audio Downsampling Script

This script finds audio files generated by generate_audio.py and downsamples them to 16kHz in place.
"""

import os
import argparse
from pathlib import Path
from tqdm import tqdm
import ffmpeg
import tempfile


def downsample_audio_file(file_path: Path, target_sample_rate: int = 16000) -> bool:
    """
    Downsample an audio file to the target sample rate in place.
    
    Args:
        file_path: Path to the audio file
        target_sample_rate: Target sample rate (default: 16000 Hz)
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Create a temporary file for the downsampled audio
        with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
            temp_path = temp_file.name
        
        try:
            # Downsample the audio file
            (
                ffmpeg
                .input(str(file_path))
                .output(temp_path, ar=target_sample_rate, acodec='libmp3lame')
                .overwrite_output()
                .run(quiet=True)
            )
            
            # Replace the original file with the downsampled version
            os.replace(temp_path, str(file_path))
            return True
            
        except Exception as e:
            # Clean up temp file if something went wrong
            if os.path.exists(temp_path):
                os.remove(temp_path)
            raise e
            
    except Exception as e:
        print(f"Error downsampling {file_path}: {e}")
        return False


def find_audio_files(audio_dir: Path, pattern: str = "*.mp3") -> list[Path]:
    """
    Find all audio files in the directory.
    
    Args:
        audio_dir: Directory to search for audio files
        pattern: File pattern to match (default: "*.mp3")
    
    Returns:
        List of audio file paths
    """
    if not audio_dir.exists():
        print(f"Error: Audio directory {audio_dir} does not exist!")
        return []
    
    audio_files = list(audio_dir.glob(pattern))
    return sorted(audio_files)


def get_audio_info(file_path: Path) -> dict:
    """
    Get audio file information using ffprobe.
    
    Args:
        file_path: Path to the audio file
    
    Returns:
        Dictionary with audio information
    """
    try:
        probe = ffmpeg.probe(str(file_path))
        audio_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'audio'), None)
        if audio_stream:
            return {
                'sample_rate': int(audio_stream.get('sample_rate', 0)),
                'duration': float(audio_stream.get('duration', 0)),
                'codec': audio_stream.get('codec_name', 'unknown')
            }
    except Exception as e:
        print(f"Error getting info for {file_path}: {e}")
    
    return {'sample_rate': 0, 'duration': 0, 'codec': 'unknown'}


def main():
    parser = argparse.ArgumentParser(description='Downsample audio files to 16kHz')
    parser.add_argument('--audio-dir', '-d', default='data/generated_audio',
                       help='Directory containing audio files (default: data/generated_audio)')
    parser.add_argument('--sample-rate', '-r', type=int, default=16000,
                       help='Target sample rate in Hz (default: 16000)')
    parser.add_argument('--pattern', '-p', default='*.mp3',
                       help='File pattern to match (default: *.mp3)')
    parser.add_argument('--dry-run', action='store_true',
                       help='Show what would be done without actually doing it')
    
    args = parser.parse_args()
    
    audio_dir = Path(args.audio_dir)
    
    print(f"Looking for audio files in: {audio_dir}")
    print(f"File pattern: {args.pattern}")
    print(f"Target sample rate: {args.sample_rate} Hz")
    
    # Find all audio files
    audio_files = find_audio_files(audio_dir, args.pattern)
    
    if not audio_files:
        print("No audio files found!")
        return
    
    print(f"Found {len(audio_files)} audio files")
    
    # Check which files need downsampling
    files_to_process = []
    already_correct = 0
    
    print("Analyzing files...")
    for file_path in tqdm(audio_files, desc="Checking sample rates"):
        info = get_audio_info(file_path)
        current_rate = info['sample_rate']
        
        if current_rate != args.sample_rate and current_rate > 0:
            files_to_process.append((file_path, current_rate))
        elif current_rate == args.sample_rate:
            already_correct += 1
    
    print(f"\nAnalysis complete:")
    print(f"  Files already at {args.sample_rate} Hz: {already_correct}")
    print(f"  Files needing downsampling: {len(files_to_process)}")
    
    if not files_to_process:
        print("No files need downsampling!")
        return
    
    if args.dry_run:
        print("\nDRY RUN - Files that would be processed:")
        for file_path, current_rate in files_to_process:
            print(f"  {file_path.name}: {current_rate} Hz â†’ {args.sample_rate} Hz")
        return
    
    # Process files
    successful = 0
    failed = 0
    
    print(f"\nDownsampling {len(files_to_process)} files...")
    for file_path, current_rate in tqdm(files_to_process, desc="Downsampling"):
        success = downsample_audio_file(file_path, args.sample_rate)
        if success:
            successful += 1
        else:
            failed += 1
    
    print(f"\nDownsampling complete:")
    print(f"  Successfully processed: {successful}")
    print(f"  Failed: {failed}")
    print(f"  Total files now at {args.sample_rate} Hz: {already_correct + successful}")


if __name__ == "__main__":
    main()
